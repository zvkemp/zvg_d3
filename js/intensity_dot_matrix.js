// Generated by CoffeeScript 1.6.3
(function() {
  var id, randomData, s1domain, s2domain;

  ZVG.IntensityMatrix = (function() {
    function IntensityMatrix() {
      var _this = this;
      d3.select('body').append('button').text('randomize').on('click', function() {
        return _this.randomizeData();
      });
      d3.select('body').append('br');
      this.initializeSvg();
    }

    IntensityMatrix.prototype.data = function(d) {
      if (d) {
        this.raw_data = d;
        this._data = this.setData(d);
      }
      return this._data;
    };

    IntensityMatrix.prototype.setData = function(d) {
      return d3.nest().key(function(z) {
        return z.series_1;
      }).key(function(z) {
        return z.series_2;
      }).entries(d);
    };

    IntensityMatrix.prototype.width = 900;

    IntensityMatrix.prototype.height = 500;

    IntensityMatrix.prototype.series_1_domain = function(d) {
      return this._series_1_domain || (this._series_1_domain = d);
    };

    IntensityMatrix.prototype.series_2_domain = function(d) {
      return this._series_2_domain || (this._series_2_domain = d);
    };

    IntensityMatrix.prototype.initializeSvg = function() {
      this.svg = d3.select('body').append('svg').attr('height', this.height + 200).attr('width', this.width + 200);
      return this.background = ZVG.Background(this.svg, this.height, this.width);
    };

    IntensityMatrix.prototype.render = function() {
      this.y || (this.y = d3.scale.ordinal().domain(this.series_2_domain()).rangeRoundBands([0, this.height]));
      this.x || (this.x = d3.scale.ordinal().domain(this.series_1_domain()).rangeRoundBands([0, this.width]));
      this.range_band = this.y.rangeBand() < this.x.rangeBand() ? this.y.rangeBand() : this.x.rangeBand();
      this.radius = d3.scale.linear().domain([0, 100]).range([0, this.range_band * 0.45]);
      this.appendSeries2Labels();
      this.appendSeries1Labels();
      this.appendSeries1();
      return this.appendSeries2();
    };

    IntensityMatrix.prototype.appendSeries1 = function() {
      var _this = this;
      this.series_1_groups = this.svg.selectAll('g.series_1').data(this.data());
      this.series_1_groups.enter().append('g').attr('class', 'series_1');
      this.series_1_groups.attr('title', function(d) {
        return d.key;
      }).attr('transform', function(d) {
        return "translate(" + (_this.x(d.key)) + ", 0)";
      });
      return this.series_1_groups.exit().remove();
    };

    IntensityMatrix.prototype.appendSeries2 = function(chart) {
      var _this = this;
      this.series_2_groups = this.series_1_groups.selectAll('circle.series_2').data(function(d) {
        return d.values;
      });
      this.series_2_groups.enter().append('circle').attr('class', 'series_2').attr('stroke', 'white').attr('stroke-width', '1.5pt').attr('r', 0);
      this.series_2_groups.attr('cy', function(d) {
        return _this.y(d.key) + _this.range_band / 2;
      }).attr('cx', this.range_band / 2).transition().duration(1000).attr('r', function(d) {
        return _this.radius(d.values[0].value);
      }).attr('title', function(d) {
        return d.key;
      }).attr('width', function() {
        return _this.range_band;
      }).attr('height', function() {
        return _this.range_band;
      }).style('fill', function(d) {
        return _this.colors()(d.values[0].value);
      });
      return this.series_2_groups.exit().remove();
    };

    IntensityMatrix.prototype.appendSeries2Labels = function() {
      var series_2_labels, series_2_lines,
        _this = this;
      series_2_labels = this.svg.selectAll('.label.series_2').data(this.series_2_domain());
      series_2_labels.enter().append('text').attr('class', 'label series_2').attr('x', this.width + 15).attr('y', function(d) {
        return _this.y(d) + _this.range_band / 2;
      }).text(function(d) {
        return d;
      });
      series_2_labels.exit().remove();
      series_2_lines = this.svg.selectAll('.line.series_2').data(this.series_2_domain());
      return series_2_lines.enter().append('line').attr('class', 'line series_2').attr('x2', 0).attr('x1', this.width).attr('y2', function(d) {
        return _this.y(d) + _this.range_band / 2;
      }).attr('y1', function(d) {
        return _this.y(d) + _this.range_band / 2;
      });
    };

    IntensityMatrix.prototype.appendSeries1Labels = function() {
      var series_1_labels, series_1_lines,
        _this = this;
      series_1_labels = this.svg.selectAll('.label.series_1').data(this.series_1_domain());
      series_1_labels.enter().append('text').attr('class', 'label series_1').attr('x', function(d) {
        return _this.x(d) + _this.range_band / 2;
      }).attr('y', this.height + 15).text(function(d) {
        return d;
      }).attr('text-anchor', 'end').attr('transform', function(d) {
        return "rotate(-90, " + (_this.x(d) + _this.range_band / 2) + ", " + (_this.height + 15) + ")";
      });
      series_1_lines = this.svg.selectAll('.line.series_1').data(this.series_1_domain());
      return series_1_lines.enter().append('line').attr('class', 'line series_1').attr('y1', 0).attr('y2', this.height).attr('x1', function(d) {
        return _this.x(d) + _this.range_band / 2;
      }).attr('x2', function(d) {
        return _this.x(d) + _this.range_band / 2;
      });
    };

    IntensityMatrix.prototype.colors = function() {
      return this._colors || (this._colors = d3.scale.linear().domain([0, 80, 100]).range(['blue', '#a8cb17', '#fdcb1f']));
    };

    IntensityMatrix.prototype.randomizeData = function() {
      this._data.forEach(function(s1) {
        return s1.values.forEach(function(s2) {
          return s2.values.forEach(function(s3) {
            return s3.value = Math.random() * 100;
          });
        });
      });
      return this.render();
    };

    return IntensityMatrix;

  })();

  s1domain = ['Survey A', 'Survey B', 'Survey C', 'Survey D', 'Survey E', 'Survey F', 'Survey G', 'Survey H'];

  s2domain = ['Under 25', '25 to 35', '35 to 45', '45 to 55', '55 to 65', '65 and over'];

  id = 0;

  randomData = function() {
    return Math.random() * 100;
  };

  window.randomDataset = function() {
    var raw, s1, _fn, _i, _len;
    raw = [];
    _fn = function(s1) {
      var s2, _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = s2domain.length; _j < _len1; _j++) {
        s2 = s2domain[_j];
        _results.push((function(s2) {
          return raw.push({
            id: id++,
            series_1: s1,
            series_2: s2,
            value: randomData()
          });
        })(s2));
      }
      return _results;
    };
    for (_i = 0, _len = s1domain.length; _i < _len; _i++) {
      s1 = s1domain[_i];
      _fn(s1);
    }
    return raw;
  };

  window.rawData = randomDataset();

  window.chart = new ZVG.IntensityMatrix();

  chart.data(randomDataset());

  chart.series_1_domain(s1domain);

  chart.series_2_domain(s2domain);

  chart.render();

}).call(this);
