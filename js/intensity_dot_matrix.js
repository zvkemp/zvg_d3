// Generated by CoffeeScript 1.6.3
(function() {
  ZVG.IntensityMatrix = (function() {
    function IntensityMatrix() {
      var _this = this;
      d3.select('body').append('button').text('randomize').on('click', function() {
        return _this.randomizeData();
      });
      d3.select('body').append('br');
      this.initializeSvg();
    }

    IntensityMatrix.prototype.data = function(d) {
      if (d) {
        this.raw_data = d;
        this._data = this.setData(d);
      }
      return this._data;
    };

    IntensityMatrix.prototype.setData = function(d) {
      return d3.nest().key(function(z) {
        return z.series_1;
      }).key(function(z) {
        return z.series_2;
      }).entries(d);
    };

    IntensityMatrix.prototype.width = 900;

    IntensityMatrix.prototype.height = 500;

    IntensityMatrix.prototype.series_1_domain = function(d) {
      if (d) {
        this._series_1_domain = d;
        return this;
      }
      return this._series_1_domain;
    };

    IntensityMatrix.prototype.series_2_domain = function(d) {
      if (d) {
        this._series_2_domain = d;
        return this;
      }
      return this._series_2_domain;
    };

    IntensityMatrix.prototype.initializeSvg = function() {
      this.svg = d3.select('body').append('svg').attr('height', this.height + 200).attr('width', this.width + 200);
      return this.background = ZVG.Background(this.svg, this.height, this.width, 0);
    };

    IntensityMatrix.prototype.render = function() {
      this.y = d3.scale.ordinal().domain(this.series_2_domain()).rangeRoundBands([0, this.height]);
      this.x = d3.scale.ordinal().domain(this.series_1_domain()).rangeRoundBands([0, this.width]);
      this.range_band = this.y.rangeBand() < this.x.rangeBand() ? this.y.rangeBand() : this.x.rangeBand();
      this.x.rangePoints([0, this.width], 1.0);
      this.radius = d3.scale.linear().domain([0, 100]).range([0, this.range_band * 0.45]);
      this.appendSeries2Labels();
      this.appendSeries1Labels();
      this.appendSeries1();
      return this.appendSeries2();
    };

    IntensityMatrix.prototype.appendSeries1 = function() {
      var _this = this;
      this.series_1_groups = this.svg.selectAll('g.series_1').data(this.data());
      this.series_1_groups.enter().append('g').attr('class', 'series_1');
      this.series_1_groups.attr('title', function(d) {
        return d.key;
      }).attr('transform', function(d) {
        return "translate(" + (_this.x(d.key)) + ", 0)";
      });
      return this.series_1_groups.exit().remove();
    };

    IntensityMatrix.prototype.appendSeries2 = function(chart) {
      var _this = this;
      this.series_2_groups = this.series_1_groups.selectAll('circle.series_2').data(function(d) {
        return d.values;
      });
      this.series_2_groups.enter().append('circle').attr('class', 'series_2').attr('stroke', 'white').attr('stroke-width', '1pt').attr('r', 0);
      this.series_2_groups.attr('cy', function(d) {
        return _this.y(d.key) + _this.range_band / 2;
      }).attr('cx', 0).transition().duration(1000).attr('r', function(d) {
        return _this.radius(d.values[0].value);
      }).attr('title', function(d) {
        return d.key;
      }).attr('width', function() {
        return _this.range_band;
      }).attr('height', function() {
        return _this.range_band;
      }).style('fill', function(d) {
        return _this.colors()(d.values[0].value);
      });
      return this.series_2_groups.exit().remove();
    };

    IntensityMatrix.prototype.appendSeries2Labels = function() {
      var series_2_labels, series_2_lines,
        _this = this;
      series_2_labels = this.svg.selectAll('.label.series_2').data(this.series_2_domain());
      series_2_labels.enter().append('text').attr('class', 'label series_2').attr('x', this.width + 15).attr('y', 0);
      series_2_labels.text(function(d) {
        return d;
      }).transition().attr('y', function(d) {
        return _this.y(d) + _this.range_band / 2;
      });
      series_2_labels.exit().remove();
      series_2_lines = this.svg.selectAll('.line.series_2').data(this.series_2_domain());
      series_2_lines.enter().append('line').style('stroke', ZVG.flatUIColors['CONCRETE']).attr('class', 'line series_2');
      series_2_lines.attr('x1', 0).attr('x2', this.width + 15).attr('y2', function(d) {
        return _this.y(d) + _this.range_band / 2;
      }).attr('y1', function(d) {
        return _this.y(d) + _this.range_band / 2;
      });
      return series_2_lines.exit().remove();
    };

    IntensityMatrix.prototype.appendSeries1Labels = function() {
      var series_1_labels, series_1_lines,
        _this = this;
      series_1_labels = this.svg.selectAll('.label.series_1').data(this.series_1_domain());
      series_1_labels.enter().append('text').attr('class', 'label series_1');
      series_1_labels.attr('x', function(d) {
        return _this.x(d);
      }).attr('y', this.height + 15).text(function(d) {
        return d;
      }).attr('text-anchor', 'end').attr('transform', function(d) {
        return "rotate(-90, " + (_this.x(d)) + ", " + (_this.height + 15) + ")";
      });
      series_1_labels.exit().transition().attr('x', 0).remove();
      series_1_lines = this.svg.selectAll('.line.series_1').data(this.series_1_domain());
      series_1_lines.enter().append('line').attr('class', 'line series_1').style('stroke', ZVG.flatUIColors['CONCRETE']).attr('y1', 0).attr('y2', this.height + 15).attr('x1', 0).attr('x2', 0);
      series_1_lines.transition().attr('x1', function(d) {
        return _this.x(d);
      }).attr('x2', function(d) {
        return _this.x(d);
      });
      return series_1_lines.exit().transition().attr('y1', this.height).remove();
    };

    IntensityMatrix.prototype.colors = function() {
      return this._colors || (this._colors = d3.scale.linear().domain([0, 80, 100]).range([ZVG.flatUIColors['PETER RIVER'], '#a8cb17', ZVG.flatUIColors['SUN FLOWER']]));
    };

    IntensityMatrix.prototype.randomizeData = function(s1Count, s2Count) {
      var data, s, s1, _fn, _i, _j, _len, _ref, _results,
        _this = this;
      s1Count || (s1Count = parseInt(Math.random() * 9 + 1));
      s2Count || (s2Count = parseInt(Math.random() * 9 + 1));
      data = [];
      _ref = (function() {
        _results = [];
        for (var _j = 1; 1 <= s1Count ? _j <= s1Count : _j >= s1Count; 1 <= s1Count ? _j++ : _j--){ _results.push(_j); }
        return _results;
      }).apply(this);
      _fn = function(s1) {
        var s2, _k, _l, _len1, _ref1, _results1, _results2;
        _ref1 = (function() {
          _results2 = [];
          for (var _l = 1; 1 <= s2Count ? _l <= s2Count : _l >= s2Count; 1 <= s2Count ? _l++ : _l--){ _results2.push(_l); }
          return _results2;
        }).apply(this);
        _results1 = [];
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          s2 = _ref1[_k];
          _results1.push((function(s2) {
            return data.push({
              series_1: "Survey " + s1,
              series_2: "Filter " + s2,
              value: Math.random() * 100
            });
          })(s2));
        }
        return _results1;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s1 = _ref[_i];
        _fn(s1);
      }
      this.data(data);
      this.series_1_domain((function() {
        var _k, _l, _len1, _ref1, _results1, _results2;
        _ref1 = (function() {
          _results2 = [];
          for (var _l = 1; 1 <= s1Count ? _l <= s1Count : _l >= s1Count; 1 <= s1Count ? _l++ : _l--){ _results2.push(_l); }
          return _results2;
        }).apply(this);
        _results1 = [];
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          s = _ref1[_k];
          _results1.push("Survey " + s);
        }
        return _results1;
      })());
      this.series_2_domain((function() {
        var _k, _l, _len1, _ref1, _results1, _results2;
        _ref1 = (function() {
          _results2 = [];
          for (var _l = 1; 1 <= s2Count ? _l <= s2Count : _l >= s2Count; 1 <= s2Count ? _l++ : _l--){ _results2.push(_l); }
          return _results2;
        }).apply(this);
        _results1 = [];
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          s = _ref1[_k];
          _results1.push("Filter " + s);
        }
        return _results1;
      })());
      return this.render();
    };

    return IntensityMatrix;

  })();

  window.chart = new ZVG.IntensityMatrix();

  chart.randomizeData();

}).call(this);
