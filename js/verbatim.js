// Generated by CoffeeScript 1.6.3
(function() {
  Dashboard.verbatim = function() {
    var appendSelectorOptions, currentSelectedOptions, filter_selector, findNumberOfPages, nPages, paginate, question_tables, renderQuestionTables, series_selector, _chart, _colors, _data, _filterDomain, _nPages, _page, _perPage, _seriesDomain;
    _chart = {};
    _data = [];
    _seriesDomain = [];
    _filterDomain = [];
    question_tables = null;
    series_selector = d3.select('#verbatims').select('#series_selector');
    filter_selector = d3.select('#verbatims').select('#filter_selector');
    _page = 1;
    _perPage = 15;
    _nPages = null;
    _colors = d3.scale.category10();
    _chart.colors = function() {
      return _colors;
    };
    _chart.data = function(d) {
      if (!d) {
        return _data;
      }
      _data = d;
      return _chart;
    };
    _chart.seriesDomain = function(d) {
      if (!d) {
        return _seriesDomain;
      }
      _seriesDomain = d;
      appendSelectorOptions(series_selector, _seriesDomain);
      return _chart;
    };
    _chart.filterDomain = function(d) {
      if (!d) {
        return _filterDomain;
      }
      _filterDomain = d;
      appendSelectorOptions(filter_selector, _filterDomain);
      _colors.domain(_filterDomain);
      return _chart;
    };
    _chart.page = function(p) {
      if (!p) {
        return _page;
      }
      _page = p;
      return _chart;
    };
    _chart.perPage = function(p) {
      if (!p) {
        return _perPage;
      }
      _perPage = p;
      return _chart;
    };
    _chart.render = function(options) {
      if (!options) {
        options = {};
      }
      return renderQuestionTables(options);
    };
    currentSelectedOptions = function() {
      return {
        series_1: _seriesDomain[series_selector[0][0].selectedIndex - 1],
        series_2: _filterDomain[filter_selector[0][0].selectedIndex - 1],
        page: _page
      };
    };
    nPages = function(n) {
      if (!n) {
        return _nPages;
      }
      return _nPages = n;
    };
    findNumberOfPages = function(numberOfResponses) {
      var div, rem;
      div = Math.floor(numberOfResponses / _perPage);
      rem = numberOfResponses % _perPage;
      if (div === 0 || rem > 0) {
        div += 1;
      }
      return div;
    };
    appendSelectorOptions = function(selector, domain) {
      selector.selectAll('option').data(['[all]'].concat(domain)).enter().append('option').attr('value', function(d) {
        return d;
      }).text(function(d) {
        return d;
      });
      return selector.on('change', function() {
        _page = 1;
        return _chart.render(currentSelectedOptions());
      });
    };
    renderQuestionTables = function(options) {
      var dataFilter, filtered, question_table, rows;
      console.log("renderQuestionTables", options);
      question_table = d3.select("#verbatims").select('table.verbatim');
      dataFilter = function(d) {
        var f, s;
        if (options.series_1 && options.series_1 !== '[all]') {
          s = options.series_1;
        }
        if (options.series_2 && options.series_2 !== '[all]') {
          f = options.series_2;
        }
        return d.filter(function(e) {
          if (s) {
            return e.series_1 === s;
          } else {
            return e;
          }
        }).filter(function(e) {
          if (f) {
            return e.series_2 === f;
          } else {
            return e;
          }
        });
      };
      filtered = dataFilter(_data);
      paginate(options.page, filtered.length);
      rows = question_table.selectAll('tr').data(filtered.slice((_page - 1) * _perPage, _perPage * _page));
      rows.enter().append('tr').attr('class', 'response');
      rows.exit().remove();
      rows.selectAll('td').remove();
      rows.append('td').text(function(d) {
        return d.id;
      });
      rows.append('td').text(function(d) {
        return d.series_1;
      });
      rows.append('td').text(function(d) {
        return d.series_2;
      }).style('color', function(d) {
        return _colors(d.series_2);
      });
      return rows.append('td').text(function(d) {
        return d.value;
      });
    };
    paginate = function(pageNumber, responseCount) {
      var allPages, includeEndEllipsis, includeStartEllipsis, links, pEnd, pStart, pagination, x, _i, _j, _results;
      nPages(findNumberOfPages(responseCount));
      allPages = (function() {
        _results = [];
        for (var _i = 1; 1 <= _nPages ? _i <= _nPages : _i >= _nPages; 1 <= _nPages ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      pStart = _page - 5;
      if (pStart < 1) {
        pStart = 1;
      }
      pEnd = _page + 4;
      if (pEnd > _nPages) {
        pEnd = _nPages;
      }
      includeStartEllipsis = pStart > 1;
      includeEndEllipsis = pEnd < _nPages;
      pagination = [];
      if (includeStartEllipsis) {
        pagination.push(1);
      }
      if (includeStartEllipsis) {
        pagination.push('...');
      }
      for (x = _j = pStart; pStart <= pEnd ? _j <= pEnd : _j >= pEnd; x = pStart <= pEnd ? ++_j : --_j) {
        pagination.push(x);
      }
      if (includeEndEllipsis) {
        pagination.push('...');
      }
      if (includeEndEllipsis) {
        pagination.push(_nPages);
      }
      console.log(pagination);
      links = d3.select('#paginate').selectAll('a').data(pagination);
      links.enter().append('a');
      links.text(function(d) {
        return " " + d + " ";
      }).on('click', function(d) {
        if (d !== '...') {
          _page = d;
          return renderQuestionTables(currentSelectedOptions());
        }
      });
      return links.exit().remove();
    };
    return _chart;
  };

  d3.json('data/verbatims_age.json', function(error, json) {
    var fd, sd;
    window.data = json.filter(function(d) {
      return d.question === 182;
    });
    sd = d3.scale.ordinal().domain(data.map(function(d) {
      return d.series_1;
    })).domain();
    fd = d3.scale.ordinal().domain(data.map(function(d) {
      return d.series_2;
    })).domain();
    window.chart = Dashboard.verbatim().data(data).seriesDomain(sd).filterDomain(fd);
    return chart.render();
  });

}).call(this);
