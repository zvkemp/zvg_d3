// Generated by CoffeeScript 1.6.3
(function() {
  Dashboard.verbatim = function() {
    var appendSelectorOptions, currentSelectedOptions, filter_selector, page, question_tables, renderQuestionTables, series_selector, _chart, _colors, _data, _filterDomain, _seriesDomain;
    _chart = {};
    _data = [];
    _seriesDomain = [];
    _filterDomain = [];
    question_tables = null;
    series_selector = d3.select('#verbatims').select('#series_selector');
    filter_selector = d3.select('#verbatims').select('#filter_selector');
    page = 1;
    _colors = d3.scale.category10();
    _chart.colors = function() {
      return _colors;
    };
    _chart.data = function(d) {
      if (!d) {
        return _data;
      }
      _data = d;
      return _chart;
    };
    _chart.seriesDomain = function(d) {
      if (!d) {
        return _seriesDomain;
      }
      _seriesDomain = d;
      appendSelectorOptions(series_selector, _seriesDomain);
      return _chart;
    };
    _chart.filterDomain = function(d) {
      if (!d) {
        return _filterDomain;
      }
      _filterDomain = d;
      appendSelectorOptions(filter_selector, _filterDomain);
      _colors.domain(_filterDomain);
      return _chart;
    };
    _chart.render = function(options) {
      if (!options) {
        options = {};
      }
      return renderQuestionTables(options);
    };
    currentSelectedOptions = function() {
      return {
        series_1: _seriesDomain[series_selector[0][0].selectedIndex - 1],
        series_2: _filterDomain[filter_selector[0][0].selectedIndex - 1],
        page: page
      };
    };
    appendSelectorOptions = function(selector, domain) {
      selector.selectAll('option').data(['[all]'].concat(domain)).enter().append('option').attr('value', function(d) {
        return d;
      }).text(function(d) {
        return d;
      });
      return selector.on('change', function() {
        return _chart.render(currentSelectedOptions());
      });
    };
    renderQuestionTables = function(options) {
      var dataFilter, question_table, rows;
      question_table = d3.select("#verbatims").select('table.verbatim');
      dataFilter = function(d) {
        var f, s;
        if (options.series_1 && options.series_1 !== '[all]') {
          s = options.series_1;
        }
        if (options.series_2 && options.series_2 !== '[all]') {
          f = options.series_2;
        }
        return d.filter(function(e) {
          if (s) {
            return e.series_1 === s;
          } else {
            return e;
          }
        }).filter(function(e) {
          if (f) {
            return e.series_2 === f;
          } else {
            return e;
          }
        }).slice(0, 14);
      };
      rows = question_table.selectAll('tr').data(dataFilter(_data));
      rows.enter().append('tr').attr('class', 'response');
      rows.exit().remove();
      rows.selectAll('td').remove();
      rows.style('color', function(d) {
        return _colors(d.series_2);
      });
      rows.append('td').text(function(d) {
        return d.id;
      });
      rows.append('td').text(function(d) {
        return d.series_1;
      });
      rows.append('td').text(function(d) {
        return d.series_2;
      });
      return rows.append('td').text(function(d) {
        return d.value;
      });
    };
    return _chart;
  };

  d3.json('data/verbatims_age.json', function(error, json) {
    var fd, sd;
    window.data = json.filter(function(d) {
      return d.question === 182;
    });
    sd = d3.scale.ordinal().domain(data.map(function(d) {
      return d.series_1;
    })).domain();
    fd = d3.scale.ordinal().domain(data.map(function(d) {
      return d.series_2;
    })).domain();
    window.chart = Dashboard.verbatim().data(data).seriesDomain(sd).filterDomain(fd);
    return chart.render();
  });

}).call(this);
