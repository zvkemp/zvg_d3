// Generated by CoffeeScript 1.6.3
(function() {
  var HelloWorld, column, data, raw_data;

  HelloWorld = (function() {
    function HelloWorld() {}

    HelloWorld.prototype.methodName = function() {
      return alert('test');
    };

    return HelloWorld;

  })();

  Dashboard.gradient = function(svg) {
    var _gradient;
    _gradient = svg.append('defs').append('linearGradient').attr('x1', '0%').attr('y1', '0%').attr('x2', '80%').attr('y2', '50%').attr('spreadMethod', 'pad').attr('id', 'standardBackgroundGradient');
    _gradient.append('stop').attr('offset', '10%').attr('stop-color', '#aaa').attr('stop-opacity', 1);
    return _gradient.append('stop').attr('offset', '110%').attr('stop-color', '#777').attr('stop-opacity', 1);
  };

  Dashboard.applyBackground = function(svg, width, height) {
    var _backgroundGroup;
    Dashboard.gradient(svg);
    _backgroundGroup = svg.append('g');
    return _backgroundGroup.append('rect').style('fill', 'url(#standardBackgroundGradient)').attr('height', height).attr('width', width).attr('rx', 5).attr('ry', 5);
  };

  Dashboard.column = function() {
    var appendSeries1Labels, appendSeries2Borders, appendSeries2Shadows, color, columnBand, columnPadding, columnSpacing, initializeLabels, initializeSeries1, initializeSeries2, initializeY, labels, percent, renderData, series1Totalwidth, series1padding, series1width, series1x, seriesPadding, series_1, series_2, setSeries1Spacing, y, _chart, _chartHeight, _chartWidth, _data, _height, _raw_data, _svg, _width;
    _chart = {
      chart_type: 'column'
    };
    _width = 1200;
    _chartWidth = 900;
    _height = 650;
    _chartHeight = 500;
    _data = [];
    _raw_data = [];
    color = d3.scale.category20();
    columnSpacing = null;
    columnPadding = null;
    seriesPadding = null;
    series1x = [];
    series1width = [];
    columnBand = null;
    series_1 = null;
    series_2 = null;
    y = null;
    labels = null;
    percent = null;
    _svg = d3.select('body').append('svg').attr('width', _width).attr('height', _height);
    _chart.svg = function() {
      return _svg;
    };
    _chart.data = function(data) {
      if (!arguments.length) {
        return _data;
      }
      _raw_data = data;
      _data = d3.nest().key(function(d) {
        return d.series_1;
      }).key(function(d) {
        return d.series_2;
      }).entries(data);
      setSeries1Spacing();
      renderData();
      return _chart;
    };
    _chart.raw_data = function() {
      return _raw_data;
    };
    _chart.percentage = d3.scale.linear().domain([0, 1]).range(['0%', '100%']);
    setSeries1Spacing = function() {
      var currentX, maxCount, ranges, scale, totalColumnCount, _i, _results;
      scale = d3.scale.ordinal().domain(_raw_data.map(function(d) {
        return d.series_1;
      }));
      ranges = {};
      totalColumnCount = 0;
      _data.forEach(function(d) {
        return totalColumnCount += d.values.length;
      });
      columnSpacing = _chartWidth / (totalColumnCount + _data.length);
      columnPadding = 0.1 * columnSpacing;
      seriesPadding = columnSpacing / 2;
      currentX = 0;
      maxCount = d3.max(_data, function(d) {
        return d.values.length;
      });
      _data.forEach(function(d, i) {
        var w;
        w = columnSpacing * (d.values.length + 1);
        series1width[i] = w - seriesPadding * 2;
        series1x[i] = currentX + seriesPadding;
        return currentX += w;
      });
      return columnBand = d3.scale.ordinal().domain((function() {
        _results = [];
        for (var _i = 0; 0 <= maxCount ? _i < maxCount : _i > maxCount; 0 <= maxCount ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this)).rangeRoundBands([0, columnSpacing * maxCount], 0.1);
    };
    setSeries1Spacing();
    Dashboard.applyBackground(_svg, _chartWidth, _chartHeight);
    series1padding = function() {
      return 0.1 * series1Totalwidth();
    };
    series1Totalwidth = function() {
      return _chartWidth / _data.length;
    };
    initializeSeries1 = function() {
      return series_1 = _svg.selectAll('.series1').data(_data).enter().append('g').attr('class', 'series1').attr('transform', function(d, i) {
        return "translate(" + series1x[i] + ",0)";
      });
    };
    appendSeries1Labels = function() {
      return series_1.append('text').text(function(d) {
        return d.key;
      }).attr('y', _chartHeight + 20).attr('x', 20).style('fill', '#f00');
    };
    initializeSeries2 = function() {
      return series_2 = series_1.selectAll('.series2').data(function(d) {
        return d.values;
      }).enter().append('g').attr('class', 'column series2').attr('label', function(d) {
        return d.key;
      }).attr('transform', function(d, i) {
        return "translate(" + (columnBand(i)) + ",0)";
      });
    };
    appendSeries2Shadows = function() {
      return series_2.append('rect').style('stroke', 'none').style('fill', '#444').attr('x', -3).attr('y', 0).attr('width', columnBand.rangeBand() + 6).attr('height', _chartHeight).attr('opacity', 0).transition().delay(600).duration(1000).attr('opacity', 0.5);
    };
    appendSeries2Borders = function() {
      return series_2.append('rect').style('stroke', 'white').style('fill', 'none').style('stroke-width', '2pt').attr('x', 0).attr('y', _chartHeight).attr('height', 0).attr('width', columnBand.rangeBand()).attr('opacity', 0).transition().delay(300).duration(700).attr('y', 0).attr('height', _chartHeight).attr('opacity', 1);
    };
    initializeY = function() {
      return y = d3.scale.linear().range([0, _chartHeight]);
    };
    initializeLabels = function() {
      labels = d3.scale.linear().range([0, 1]);
      return percent = d3.format('.0%');
    };
    renderData = function() {
      var current_y;
      initializeSeries1();
      appendSeries1Labels();
      initializeSeries2();
      appendSeries2Shadows();
      appendSeries2Borders();
      initializeY();
      initializeLabels();
      current_y = 0;
      series_2.selectAll('rect.vg').data(function(d) {
        return d.values[0].data;
      }).enter().append('rect').style('fill', function(d, i) {
        return color(i);
      }).attr('x', 0).attr('y', _chartHeight).attr('height', 0).transition().duration(700).attr('y', function(d, i) {
        var dp, h;
        if (i === 0) {
          current_y = 0;
        }
        dp = this.parentNode.__data__.values[0].data;
        h = y.domain([0, d3.sum(dp)])(d);
        current_y += h;
        return current_y - h;
      }).attr('class', function(d, i) {
        return "vg vg_" + i;
      }).attr('width', columnBand.rangeBand()).attr('height', function(d) {
        var dp;
        dp = this.parentNode.__data__.values[0].data;
        return y.domain([0, d3.sum(dp)])(d);
      });
      return series_2.selectAll('text.column').data(function(d) {
        return d.values[0].data;
      }).enter().append('text').text(function(d) {
        var dp;
        dp = this.parentNode.__data__.values[0].data;
        return percent(labels.domain([0, d3.sum(dp)])(d));
      }).attr('x', columnBand.rangeBand() / 2).attr('y', function(d, i) {
        var dp, h;
        if (i === 0) {
          current_y = 0;
        }
        dp = this.parentNode.__data__.values[0].data;
        h = y.domain([0, d3.sum(dp)])(d);
        current_y += h;
        return current_y - (0.5 * h);
      }).attr('class', 'column-label').attr('opacity', 0).transition().delay(300).duration(700).attr('opacity', 1);
    };
    return _chart;
  };

  column = Dashboard.column();

  raw_data = [
    {
      series_1: "Survey A",
      series_2: "male",
      n: 400,
      data: [300, 100, 50, 25]
    }, {
      series_1: "Survey A",
      series_2: "female",
      n: 700,
      data: [300, 250, 9, 150]
    }, {
      series_1: "Survey A",
      series_2: "other",
      n: 700,
      data: [340, 50, 89, 150]
    }, {
      series_1: "Survey B",
      series_2: "all",
      n: 650,
      data: [500, 150, 15, 0]
    }, {
      series_1: "Survey C",
      series_2: "male",
      n: 200,
      data: [100, 25, 75]
    }, {
      series_1: "Survey C",
      series_2: "female",
      n: 400,
      data: [100, 16, 250, 50]
    }, {
      series_1: "Survey D",
      series_2: "male",
      n: 900,
      data: [19, 500, 300, 100]
    }, {
      series_1: "Survey D",
      series_2: "female",
      n: 800,
      data: [500, 200, 100]
    }, {
      series_1: "Survey D",
      series_2: "other",
      n: 900,
      data: [500, 300, 100]
    }
  ];

  data = d3.nest().key(function(d) {
    return d.series_1;
  }).key(function(d) {
    return d.series_2;
  }).entries(raw_data);

  window.raw_data = raw_data;

  window.data = data;

  column.data(raw_data);

  window.column = column;

}).call(this);
